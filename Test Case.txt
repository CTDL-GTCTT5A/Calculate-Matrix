Chọn mục số 6 . copy và pas những dòng phương trình vào

//_______________________HỆ VÔ NGHIỆM__________________
2
3
1 1 2
1 -1 0
1 1 3 

//____________________CÓ NGHIỆM Duy nhất__________________
3
3
1 0 1 4
2 1 3 9
-1 -1 -1 -2

Nghiệm : 1 , -2  , 3


3
3
1 2 1 0
2 5 1 0
-3 -1 -9 0

Nghiệm 0 , 0 ,0


3
3
1 -1 -2 -3
2 -1 1 1
1 1 1 4

Nghiệm : 1 , 2 ,1

//____________________CÓ NGHIỆM TỰ DO__________________
3
3
1 1 -2 4
2 3 3 3
5 7 4 10
Nghiệm : 9+9u1 , -5-7u1 , u1

4
3
-2 2 1 2 -1
3 -1 0 1 4
1 -1 -1 -1 -1
Nghiệm : 3 , -1-2u1 , 1-u1;

4 
2
1 2 17 -29 0
0 1 -10 17 0

Nghiệm : u1 , u2 , 10u2-17u1 , 63u1 - 37u2




3
1
1 2 3 4

Nghiệm : 4-3u1-2u2 , u2 , u1









//__________________________________________________________________________________TRƯỜNG HỢP HỆ CÓ NGHIỆM TỰ DO__________________________________________________________________
	else if (rank < dong && matrix[dong - 1][cot - 1] == 0)
	{
		//Chuỗi nghiệm mục đích là để xuất ra những nghiệm mà ta tìm được
		string* ChuoiNghiem = new string[dong+1];
		ChuoiNghiem[0] = "u1";
		int soNghiemTuDo = 1;  //Đánh dấu nghiệm để xuất ra
		int nghiemThuN = 1; 

		//Dùng để đánh dấu các hệ số t
		float* hesoT = new float[dong+1];
		hesoT[0] = 1;
		int soluongHs = 1;
		int cotBien = cot - 2; //Thứ tự lấy nghiệm của các cột

		//Mảng a dùng để lưu các nghiệm
		float* a = new float[dong];
		//Gán các nghiệm tự do = 0 hỗ trợ ta trong việc tách phần số và phần biến riêng
		a[0] = 0;
		int n = 1;	
		for (int i = dong - 2; i >= 0; i--)
		{
			//Hệ số tại mỗi vị trí dòng sau khi đã lấy biến các dòng dưới.
			float heso = matrix[i][cotBien--];
			//số t sau = he số cột hiện tại x số biến t lúc trước
			hesoT[soluongHs] = heso*hesoT[soluongHs-1];
			hesoT[soluongHs] *= -1;
			soluongHs++;

			//Pos a là tại mỗi vị trí cần trừ để tìm x thì trừ đi những nghiệm đã có	
			int posA = 0;
			//tongHS += matrix[i][cot - 2];
			for (int j = cot - 2; j >= 0; j--)
			{
				//Nếu dòng đó toàn số 0 thì tăng biến tự do lên 1.
				if (i != dong - 2 && isFullZero(matrix, i, cot - 2) == true)
				{
					soNghiemTuDo++;
				}


				//Nếu tại cột j không phải là một phần tử cơ sở(phần tử đầu tiên tại dòng !=0) , thì áp dụng quy tắc tìm x tính bình thường
				if (j != FirstCol(matrix, i, cot))
				{
					matrix[i][cot - 1] -= a[posA] * matrix[i][j];
					posA++;
				}
				//Trường hợp line đó toàn 0
				//Sau khi đã đến vị trí cơ sở thì => nghiệm tại đó 
				else if(j == FirstCol(matrix, i, cot) || isFullZero(matrix, i, cot - 2) == true)
				{
					if (i != dong - 2)
					{
						hesoT[soluongHs - 1] += -1*matrix[i][cot - 2];
					}	
					if (matrix[i][cot - 1] != 0)
					{
						matrix[i][cot - 1] = (float)matrix[i][cot - 1] / matrix[i][j];
					}
					hesoT[soluongHs - 1]/= (float)matrix[i][j];
					ChuoiNghiem[nghiemThuN++] = to_string(matrix[i][cot - 1]) + "+" + to_string(hesoT[soluongHs - 1]) + "u"+to_string(soNghiemTuDo);
					a[n++] = matrix[i][cot - 1];
					
				}


			}
		}
		for (int i = 0; i < nghiemThuN; i++)
			cout << ChuoiNghiem[i] << "\t";

		delete[] a;

	}




























#include "Matrix.h"
#include<iostream>
#include<iomanip>
#include<sstream>
using namespace std;


Matrix::Matrix()
{
	matrix = NULL;
	adjMatrix = NULL;
	cap = 0;
}

Matrix::Matrix(int n)
{
	matrix = new double*[n];
	for (int i = 0; i < n; i++)
	{
		matrix[i] = new double[n];
	}

	adjMatrix = new double*[n];
	for (int i = 0; i < n; i++)
	{
		adjMatrix[i] = new double[n];
	}
}


void Matrix::Input()
{
	cout << "Nhap vao dong - cot cua ma tran : ";
	cin >> row >> col;
	if (row == col)
		cap = row;
	matrix = new double*[row];
	adjMatrix = new double*[row];

	for (int i = 0; i < row; i++)
	{
		matrix[i] = new double[col];
		adjMatrix[i] = new double[col];
	}
 

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cin >> matrix[i][j];
		}
	}
}


void Matrix::Output()
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << setw(10);
			if (matrix[i][j] == (int)matrix[i][j])
				cout << fixed << setprecision(0) << matrix[i][j] << setw(12);

			else
			cout << fixed << setprecision(2) << matrix[i][j] << setw(12);
		}
		cout << endl;
	}
}

//Tham số n = 0 khi nó là ma trận vuông
void CreateNewMatrix(double **&matrix ,int  m, int n=0)
{
	matrix = new double*[m];
	for (int i = 0; i < m; i++)
		if(n!=0)
			matrix[i] = new double[n];
		else
			matrix[i] = new double[m];
}

//Thuật toán tính ma trận cấp n như sau:
/*
Thay vì tính trực tiếp ta sẽ hạ bậc từ từ bằng đệ quy cho đến khi nó cấp 2 là điều kiện dừng
Ta hạ cấp bằng cách bỏ từng dòng i và cột 0 để tính định thức tại cấp đó
ví dụ ta có ma trận 4x4
khi ta bỏ dòng thứ 0 và cột thứ 0 thì nó ngay lập tức về ma trận 3x3
tương tự bỏ dòng thứ 1 và cột thứ 0 => ma trận 3x3
tương tự như thế cho đến khi hết dòng
Ta được 4 ma trận 3x3
Và Det(A) = A[i][0]*(-1)^i+Det(Ai)
với Ai là các ma trận ta vừa hạ cấp

Tóm lại : khi có ma trận cấp 5
-Ta hạ cấp được 5 ma trận cấp 4
-1 Ma trận cấp 4 hạ được 4 ma trận cấp 3  => 5 ma trận cấp 4 = 20 ma trận cấp 3 
- 20 ma trận cấp 3 => 60 ma trận cấp 2 => trả được kết quả


=>Cho nên khi tính với cấp n ta chỉ cần gọi đệ quy là được
*/
double Matrix::Det(double**matrix,int cap)
{
	if (row != col)
	{
		//Không phải ma trận vuông nên không thể tính
		return NULL;
	}

	double det = 0, t;
	if(cap==2)
		return matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1];
	// Ở tại mỗi dòng thì mỗi lần lấy ra một matrix con thì bỏ lần lượt từng dòng với cột 1
	for (int d = 0; d < cap; d++)
	{
		double** subMatrix;
		int dong = 0, cot = 0;
		//Khởi tạo địa chỉ cho subMatrix
		CreateNewMatrix(subMatrix, cap);
		for (int i = 0; i < cap; i++)
		{
			cot = 0;
			for (int j = 1; j < cap; j++)
			{
				if (i != d)
				{
					subMatrix[dong][cot] = matrix[i][j];
					cot++;
				}
			}
			//Kiểm tra nếu nhập được thì mới tăng dòng lên tránh tăng 2 lần
			if (i != d)
			{
				dong++;
			}

		}
		if (d % 2 == 0)
			t = 1;
		else
			t = -1;
		det += matrix[d][0] * t*Det(subMatrix, cap - 1);
		delete[] subMatrix;
	}
	return det;
}







/*
Thuật toán tìm ma trận nghịch đảo :

Ta sẽ áp dụng tính chất sau đây :

   A^(-1) = A/det|A|*Adj(A)^T
   => Ta cần tìm ma trận phụ hợp Adj của A sau đó chuyển vị nó lại (^T  = transform = chuyển vị)
   Và det|A| ta đã làm ở bài 1
   
*/


//Tìm ma trận Transform(chuyển vị) của matrix truyền vào
double**Transform(double**matrix,int dong , int cot)
{
	double**matrixtemp;
	CreateNewMatrix(matrixtemp, dong , cot);
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{	

			// Dòng lệnh này là chuyển từ dòng thành cột.
			matrixtemp[j][i] = matrix[i][j];
		}
	}
	return matrixtemp;
}


//Hàm tìm ma trận phụ hợp
/*
Thuật toán tìm ma trận phụ hợp là 
Adj(A) = -1^(i+j) * Dij
Tức là ta lần lượt bỏ từng dòng và cột của ma trận A sau đó Tính định thức của ma trận sau khi bỏ dòng và cột đó
rồi lấy định thức đó nhân với -1^(dòng + cột) là ra được phần tử thứ ij(phần tử tại vị trí dòng và cột đó)
ví dụ :
A = [[a11 , a12 , a13]
	 [a21 , a22 , a23]
	 [a31 , a32 , a33]]

Thì Adj(A) = 
				
			[[A11 , A12 , A13]
			 [A21 , A22 , A23]
			 [A31 , A32 , A33]]
	Với A11=-1(1+1) * D11 
	    A12 = -1(1+2) * D12
		A13 = -1(1+3) * D13
	với D11 D12 D13 là định thức mà bỏ đi các dòng-cột : 1-1 , 1-2 , 1-3.

*/

//Thể hiện thuật toán
Matrix Matrix::FindAdj()
{
	if (row != col)
	{
		cout << "Khong phai ma tran vuong\n";
		return NULL;
	}
	else
	{
		Matrix temp;
		//Tạo ma trận adj mới
		CreateNewMatrix(temp.matrix, cap);
		temp.cap = cap;
		temp.row = cap;
		temp.col = cap;
		int det = 0, t;

		//Riêng ma trận cấp 2 thì bỏ dòng đi ta có ma trận cấp 1 nhưng ở hàm tính det thì điều kiện dừng là det==2 => ta phải làm trường hợp riêng
		if (cap == 2)
		{
			//Đổi chỗ a[0][0] và a[1][1]
			temp.matrix[0][0] = matrix[1][1];
			temp.matrix[1][1] = matrix[0][0];
			temp.matrix[0][1] = -1 * matrix[1][0];
			temp.matrix[1][0] = -1 * matrix[0][1];
		}
		// Ở tại mỗi dòng thì mỗi lần lấy ra một matrix con thì bỏ lần lượt từng dòng với cột 
		//Với d và c là các dòng-cột ta bỏ lần lượt
		else
		{
			for (int d = 0; d < cap; d++)
			{
				for (int c = 0; c < cap; c++)
				{
					double** subMatrix;
					int dong = 0, cot = 0;
					//Khởi tạo địa chỉ cho subMatrix
					CreateNewMatrix(subMatrix, cap);
					for (int i = 0; i < cap; i++)
					{
						//nếu i không trùng với dòng bỏ thì thực hiện
						if (i != d)
						{
							cot = 0;
							for (int j = 0; j < cap; j++)
							{
								//Nếu j không trùng với dòng bỏ thì thực hiện tìm ma trận con
								if (j != c)
								{
									subMatrix[dong][cot] = matrix[i][j];
									cot++;
								}
							}
							dong++;
						}

					}


					//Hệ số -1(i+j)
					int somu = c + d;
					int heso;
					if (somu % 2 == 0)
						heso = 1;
					else
						heso = -1;

					//Trả về ma trận phụ hợp
					temp.matrix[d][c] = heso * Det(subMatrix, cot);

					//cout << endl;

					delete[] subMatrix;
				}
			}
		}
		return temp;
	}

	
	//return det;
}


Matrix Matrix::inverse()
{
	
	if (row != col)
	{
		cout << "Khong phai ma tran vuong\n";
		return NULL;
	}
	else
	{
		//Gọi hàm tìm ma trận phụ hợp
		Matrix adj = FindAdj();
		//Cấp = row vì nó là ma trận vuông
		cap = row;
		//Tranform lại ma trận phụ hợp sau đó nhân cho 1/DET|A| là ra được ma trận nghịch đảo
		adj.matrix = Transform(adj.matrix, adj.cap, adj.cap);
		for (int i = 0; i < cap; i++)
		{
			for (int j = 0; j < cap; j++)
			{
				//A^-1 = 1/Det|A| * Adj(A)
				adj.matrix[i][j] *= (double)1 / Det(matrix, cap);
			}
		}
		return adj;
	}
	

}

Matrix Matrix::operator*(const Matrix b)
{
	if (col != b.row)
	{
		cout << "Khong the nhan(vi so cot KHAC so dong) \n";
		return NULL;
	}
	else
	{
		Matrix kq;
		//Kết quả trả về là một ma trận với cấp là : dòng của A x Cột của B
		CreateNewMatrix(kq.matrix, row, b.col);
		kq.row = row;
		kq.col = b.col;
		int c = 0;
		for (int i = 0; i < row; i++)
		{
			
			for (int j = 0; j < b.col; j++)
			{
				int sum = 0;
				for (int k = 0; k < col; k++)
				{

					sum += matrix[i][k] * b.matrix[k][j];
				}
				kq.matrix[i][c] = sum;
				c++;
			}
			c = 0;
		}
		return kq;
	}

	
}



//Đếm số dòng khác 0 trong matrix hỗ trợ việc tính rank
int DemSoDongKhac0(double** matrix, int row, int col)
{
	int count = 0;
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (matrix[i][j] != 0)
				break;
			else
			{
				if (j == col - 1)   //đã quét hết cột
				{
					count++;
				}
			}
		}
	}
	return row - count;
}
//Tính số lượng số 0 có trong dòng đó (từ đầu line cho đến khi gặp số !=0)
int CalcZero(double **matrix , int col  , int line)
{
	int sum = 0;
	for (int j = 0; j < col; j++)
	{
		if (matrix[line][j] == 0)
			sum++;
		else
		{
			return sum;
		}
	}
	return sum;
}
//Kiểm tra xem dòng đó có toàn số 0 không
bool isFullZero(double** matrix, int line, int col)
{
	for (int j = 0; j < col; j++)
	{
		if (matrix[line][j] != 0)
			return false;

	}
	return true;
}
//Swapline : hỗ trợ việc đổi dòng matrix nhiều số 0
void SwapLine(double** matrix, int row, int col)
{
	for (int i = 0; i < row-1; i++)
	{
		for (int j = i + 1; j < row; j++)
		{
			if (CalcZero(matrix, col, i) > CalcZero(matrix, col, j))
				//Thực hiện swap line
			{
				for (int k = 0; k < col; k++)
				{
					swap(matrix[i][k], matrix[j][k]);
				}
			}
		}
	}
}
//Tìm vị trí cột đầu tiên !=0 của line 1
int FirstCol(double** matrix, int line ,int col)
{
	for (int i = 0; i < col; i++)
	{
		if (matrix[line][i] != 0)
			return i;
	}
	return 0;
}


/*
Thuật toán tìm hạng của ma trận:

Đầu tiên ta sẽ biến nó về dạng ma trận bậc thang như sau:
a b c d
0 x y z
0 0 j k
0 0 0 p

đó là một dạng của ma trận bậc thang(thật ra ma trận bậc thang có nhiều dàng)
Và hạng của nó = số dòng khác 0 của ma trận ấy.

*/

//Hàm chuyển về ma trận bậc thang :

double**ChuyenVeBacThang(double** matrix, int row, int col)
{
	int cot = FirstCol(matrix, 0, col);  //Tìm số đầu tiên khác 0 dòng đầu tiên
	for (int i = 0; i < row - 1; i++)
	{
		for (int j = i + 1; j < row; j++)  //dòng chạy
		{
			//lấy giá trị dòng trên và dòng dưới
			int a = matrix[i][cot];
			int b = matrix[j][cot];
			for (int k = 0; k < col; k++)
			{
				//Tại mỗi cột thì trừ nhau cho mất đi giá trị đầu tiên(biến về ma trận bậc thang)
				matrix[j][k] = matrix[j][k] * a - matrix[i][k] * b;
			}

		}
		//Sau mỗi lần trừ , tránh trường hợp những dòng = 0 thì thuật toán sẽ bị sai.
		//Vì vậy sau mỗi lần trừ ta phải sort lại ma trận
		SwapLine(matrix, row, col);
		cot = FirstCol(matrix, i + 1, col);

	}
	return matrix;
}

int  Matrix::Rank()
{
	//Tạo ma trận với , mọi thao tác sẽ thực hiện trên biến matrix tạm(tránh thay đổi giá trị)
	double** matrixtemp;
	CreateNewMatrix(matrixtemp,row,col);
	//Gán bằng với matrix hiện tại của class:
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			matrixtemp[i][j] = matrix[i][j];
		}
	}
	
	//Gọi hàm thay đổi thứ tự các dòng
	SwapLine(matrixtemp, row, col);
	
	//Gọi hàm chuyển về ma trận bậc thang
	matrixtemp = ChuyenVeBacThang(matrixtemp, row, col);
	


	int Rank = DemSoDongKhac0(matrixtemp, row, col);
	delete matrixtemp;

	return Rank;

	//Bắt đầu tính hạng của ma trận = số dòng khác 0 của ma trận = số dòng - số dòng(=0);
}

//Hàm chuyển số qua chuỗi
string Tostring(int n)
{
	return std::to_string(n);
}

float SumHeSo(float* a , int n)
{
	float sum = 0;
	for (int i = 0; i < n; i++)
	{
		sum += a[i];
	}
	return sum;
}

//Đây là hàm hộ trợ tìm nghiệm sau khi chuyển về ma trận bậc thang
void TimNghiem(double **matrix , int dong , int cot)
{

	int rank = DemSoDongKhac0(matrix, dong, dong);

	//_______________________________________________________________________________ TRƯỜNG HỢP HỆ CÓ DUY VÔ NGHIỆM_______________________________________________________________________________

	if (rank < dong && matrix[dong - 1][cot-1] != 0)
	{
		cout << "He vo nghiem" << endl;
		return;
	}
	//_____________________________________________________________________________ TRƯỜNG HỢP HỆ CÓ DUY NHẤT 1 NGHIỆM_______________________________________________________________
	else if (rank == dong)
	{
		//Mảng a dùng để lưu các nghiệm
		float* a = new float[dong];
		a[0] = (float)matrix[dong - 1][cot - 1] / matrix[dong - 1][cot - 2];
		int n = 1;
		for (int i = dong - 2; i >= 0; i--)
		{
			//Pos a là tại mỗi vị trí cần trừ để tìm x thì trừ đi những nghiệm đã có	
			int posA = 0;
			for (int j = cot - 2; j >= 0; j--)
			{		
				//Nếu tại cột j không phải là một phần tử cơ sở(phần tử đầu tiên tại dòng !=0) , thì áp dụng quy tắc tìm x tính bình thường
				if (j != FirstCol(matrix, i, cot))
				{

					matrix[i][cot - 1] -= a[posA] * matrix[i][j];
					posA++;
				}
				//Sau khi đã đến vị trí cơ sở thì => nghiệm tại đó 
				else
				{
					matrix[i][cot - 1] = (float)matrix[i][cot - 1] / matrix[i][j];
					a[n++] = matrix[i][cot - 1];
				}
			}
		}
		for (int i = 0; i < n; i++)
			cout << a[i] << "\t";
		delete[] a;
	}

	//__________________________________________________________________________________TRƯỜNG HỢP HỆ CÓ NGHIỆM TỰ DO__________________________________________________________________
	else if (rank < dong && matrix[dong - 1][cot - 1] == 0)
	{
		//Chuỗi nghiệm mục đích là để xuất ra những nghiệm mà ta tìm được
		string* ChuoiNghiem = new string[dong+1];
		ChuoiNghiem[0] = "u1";
		int soNghiemTuDo = 1;  //Đánh dấu nghiệm để xuất ra
		int nghiemThuN = 1; 
	
		int slNghiem = dong - rank;
		cout << slNghiem << endl;
		for (int i = soNghiemTuDo; i < slNghiem; i++)
		{
			ChuoiNghiem[i] = "u" + to_string(i+1);
			nghiemThuN++;

		}
		//Dùng để đánh dấu các hệ số t
		float* hesoT = new float[dong+1];
		float* hesoTTimDuoc = new float[dong + 1];
		int nghiemtimduoc = 0;
		int soluongHs = 0;
		int cotBien = cot - 2; //Thứ tự lấy nghiệm của các cột
		//Mảng a dùng để lưu các nghiệm
		float* a = new float[dong];
		//Gán các nghiệm tự do = 0 hỗ trợ ta trong việc tách phần số và phần biến riêng
		a[0] = 0;
		int n = 1;	

		int c;
		//Tìm dòng khác 0 đầu tiên
		for (int i = dong - 2; i >= 0; i--)
		{
			//Nếu dòng đó toàn số 0 thì tăng biến tự do lên 1.
			if (isFullZero(matrix, i, cot - 2) == true)
			{
				a[soNghiemTuDo++] = 0;
			}
			if (isFullZero(matrix, i, cot - 2) == false)
			{
				dong = i;
				break;
			}

		}
		//Tại các dòng khác 0 thì ta bắt đầu gán biến cho từng hệ số
		for (int i = dong; i >= 0; i--)
		{		
			soluongHs = 0;

				for (c = cot - 2; c >= 0; c--)
				{
					if (soluongHs == slNghiem)
						break;
						float heso = matrix[i][c];
						hesoT[soluongHs] = heso;
						hesoT[soluongHs] *= -1;
						soluongHs++;

				}
			//Dành cho trường hợp 1 nghiệm tự do:
			//Hệ số tại mỗi vị trí dòng sau khi đã lấy biến các dòng dưới.
			//số t sau = he số cột hiện tại x số biến t lúc trước
			//Pos a là tại mỗi vị trí cần trừ để tìm x thì trừ đi những nghiệm đã có	
			int posA = 0;

			//tongHS += matrix[i][cot - 2];
			for (int j = cot - 2; j >= 0; j--)
			{
				//Nếu tại cột j không phải là một phần tử cơ sở(phần tử đầu tiên tại dòng !=0) , thì áp dụng quy tắc tìm x tính bình thường
				if (j != FirstCol(matrix, i, cot))
				{
					matrix[i][cot - 1] -= a[posA] * matrix[i][j];
					posA++;
				}
				//Trường hợp line đó toàn 0
				//Sau khi đã đến vị trí cơ sở thì => nghiệm tại đó 
				else if(j == FirstCol(matrix, i, cot) || isFullZero(matrix, i, cot - 2) == true)
				{
					if (matrix[i][cot - 1] != 0)
					{
						matrix[i][cot - 1] = (float)matrix[i][cot - 1] / matrix[i][j];
						for (int z = 0; z < soluongHs; z++)
						{
							hesoT[z] /= (float)matrix[i][j];
						}
					}
					//cout << soNghiemTuDo << endl;
					if (soNghiemTuDo == 1)
					{
						hesoT[soluongHs] = matrix[i][j+1] * hesoT[soluongHs - 1];
						hesoT[soluongHs] *= -1;
						soluongHs++;
						ChuoiNghiem[nghiemThuN++] = to_string(matrix[i][cot - 1]) + "+" + to_string(hesoT[soluongHs-1]) + "u" + to_string(soNghiemTuDo);

					}
					else
					{
						ChuoiNghiem[nghiemThuN] = to_string(matrix[i][cot - 1]);

						for (int z = 0; z < soluongHs; z++)
						{
							ChuoiNghiem[nghiemThuN] += "+" + to_string(hesoT[z]) + "u" + to_string(z+1);
						}
						nghiemThuN++;
					}
					a[n++] = matrix[i][cot - 1];
					
				}


			}
		}
		for (int i = 0; i < nghiemThuN; i++)
			cout << ChuoiNghiem[i] << "\t\t";

		delete[] a;

	}

}

void Matrix::InRaNghiem()
{
	//Chuyển về ma trận bậc thang
	double** matrixtemp;
	int sobien, pt;
	cout << "Nhap vao so bien cua he phuong trinh : ";
	cin >> sobien;
	cout << "Nhap vao so phuong trinh : ";
	cin >> pt;
	
	int cloneDong0 = 0;
	if (pt < sobien)
		cloneDong0 = sobien - pt;
		
	//Ta sẽ tạo với số biến + 1 tại vì thêm vào giá trị của mỗi phương trình nữa
	CreateNewMatrix(matrixtemp , pt+ cloneDong0, sobien+1);
	cout << "Nhap tuan tu cac he phuong trinh : " << endl;
	//Gán bằng với matrix hiện tại của class:
	for (int i = 0; i < pt; i++)
	{
		for (int j = 0; j < sobien+1; j++)
		{
			cin >> matrixtemp[i][j];
		}
	}

	for (int i = pt; i < pt+cloneDong0; i++)
	{
		for (int j = 0; j < sobien + 1; j++)
		{
			matrixtemp[i][j] = 0;
		}
	}
	//Gọi hàm thay đổi thứ tự các dòng
	SwapLine(matrixtemp, row, col);
	for (int i = 0; i < pt + cloneDong0; i++)
	{
		for (int j = 0; j < sobien + 1; j++)
		{
			cout << matrixtemp[i][j] << "\t";
		}
		cout << endl;
	}

	//Gọi hàm chuyển về ma trận bậc thang
	matrixtemp = ChuyenVeBacThang(matrixtemp, pt+cloneDong0, sobien+1);


	

	//Tìm nghiệm:
	TimNghiem(matrixtemp, pt+cloneDong0 , sobien+1);

	
	
}

Matrix::~Matrix()
{
}




_________________--

#include "Matrix.h"
#include<iostream>
#include<iomanip>
#include<sstream>
using namespace std;


Matrix::Matrix()
{
	matrix = NULL;
	adjMatrix = NULL;
	cap = 0;
}

Matrix::Matrix(int n)
{
	matrix = new double*[n];
	for (int i = 0; i < n; i++)
	{
		matrix[i] = new double[n];
	}

	adjMatrix = new double*[n];
	for (int i = 0; i < n; i++)
	{
		adjMatrix[i] = new double[n];
	}
}


void Matrix::Input()
{
	cout << "Nhap vao dong - cot cua ma tran : ";
	cin >> row >> col;
	if (row == col)
		cap = row;
	matrix = new double*[row];
	adjMatrix = new double*[row];

	for (int i = 0; i < row; i++)
	{
		matrix[i] = new double[col];
		adjMatrix[i] = new double[col];
	}
 

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cin >> matrix[i][j];
		}
	}
}


void Matrix::Output()
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << setw(10);
			if (matrix[i][j] == (int)matrix[i][j])
				cout << fixed << setprecision(0) << matrix[i][j] << setw(12);

			else
			cout << fixed << setprecision(2) << matrix[i][j] << setw(12);
		}
		cout << endl;
	}
}

//Tham số n = 0 khi nó là ma trận vuông
void CreateNewMatrix(double **&matrix ,int  m, int n=0)
{
	matrix = new double*[m];
	for (int i = 0; i < m; i++)
		if(n!=0)
			matrix[i] = new double[n];
		else
			matrix[i] = new double[m];
}

//Thuật toán tính ma trận cấp n như sau:
/*
Thay vì tính trực tiếp ta sẽ hạ bậc từ từ bằng đệ quy cho đến khi nó cấp 2 là điều kiện dừng
Ta hạ cấp bằng cách bỏ từng dòng i và cột 0 để tính định thức tại cấp đó
ví dụ ta có ma trận 4x4
khi ta bỏ dòng thứ 0 và cột thứ 0 thì nó ngay lập tức về ma trận 3x3
tương tự bỏ dòng thứ 1 và cột thứ 0 => ma trận 3x3
tương tự như thế cho đến khi hết dòng
Ta được 4 ma trận 3x3
Và Det(A) = A[i][0]*(-1)^i+Det(Ai)
với Ai là các ma trận ta vừa hạ cấp

Tóm lại : khi có ma trận cấp 5
-Ta hạ cấp được 5 ma trận cấp 4
-1 Ma trận cấp 4 hạ được 4 ma trận cấp 3  => 5 ma trận cấp 4 = 20 ma trận cấp 3 
- 20 ma trận cấp 3 => 60 ma trận cấp 2 => trả được kết quả


=>Cho nên khi tính với cấp n ta chỉ cần gọi đệ quy là được
*/
double Matrix::Det(double**matrix,int cap)
{
	if (row != col)
	{
		//Không phải ma trận vuông nên không thể tính
		return NULL;
	}

	double det = 0, t;
	if(cap==2)
		return matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1];
	// Ở tại mỗi dòng thì mỗi lần lấy ra một matrix con thì bỏ lần lượt từng dòng với cột 1
	for (int d = 0; d < cap; d++)
	{
		double** subMatrix;
		int dong = 0, cot = 0;
		//Khởi tạo địa chỉ cho subMatrix
		CreateNewMatrix(subMatrix, cap);
		for (int i = 0; i < cap; i++)
		{
			cot = 0;
			for (int j = 1; j < cap; j++)
			{
				if (i != d)
				{
					subMatrix[dong][cot] = matrix[i][j];
					cot++;
				}
			}
			//Kiểm tra nếu nhập được thì mới tăng dòng lên tránh tăng 2 lần
			if (i != d)
			{
				dong++;
			}

		}
		if (d % 2 == 0)
			t = 1;
		else
			t = -1;
		det += matrix[d][0] * t*Det(subMatrix, cap - 1);
		delete[] subMatrix;
	}
	return det;
}







/*
Thuật toán tìm ma trận nghịch đảo :

Ta sẽ áp dụng tính chất sau đây :

   A^(-1) = A/det|A|*Adj(A)^T
   => Ta cần tìm ma trận phụ hợp Adj của A sau đó chuyển vị nó lại (^T  = transform = chuyển vị)
   Và det|A| ta đã làm ở bài 1
   
*/


//Tìm ma trận Transform(chuyển vị) của matrix truyền vào
double**Transform(double**matrix,int dong , int cot)
{
	double**matrixtemp;
	CreateNewMatrix(matrixtemp, dong , cot);
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{	

			// Dòng lệnh này là chuyển từ dòng thành cột.
			matrixtemp[j][i] = matrix[i][j];
		}
	}
	return matrixtemp;
}


//Hàm tìm ma trận phụ hợp
/*
Thuật toán tìm ma trận phụ hợp là 
Adj(A) = -1^(i+j) * Dij
Tức là ta lần lượt bỏ từng dòng và cột của ma trận A sau đó Tính định thức của ma trận sau khi bỏ dòng và cột đó
rồi lấy định thức đó nhân với -1^(dòng + cột) là ra được phần tử thứ ij(phần tử tại vị trí dòng và cột đó)
ví dụ :
A = [[a11 , a12 , a13]
	 [a21 , a22 , a23]
	 [a31 , a32 , a33]]

Thì Adj(A) = 
				
			[[A11 , A12 , A13]
			 [A21 , A22 , A23]
			 [A31 , A32 , A33]]
	Với A11=-1(1+1) * D11 
	    A12 = -1(1+2) * D12
		A13 = -1(1+3) * D13
	với D11 D12 D13 là định thức mà bỏ đi các dòng-cột : 1-1 , 1-2 , 1-3.

*/

//Thể hiện thuật toán
Matrix Matrix::FindAdj()
{
	if (row != col)
	{
		cout << "Khong phai ma tran vuong\n";
		return NULL;
	}
	else
	{
		Matrix temp;
		//Tạo ma trận adj mới
		CreateNewMatrix(temp.matrix, cap);
		temp.cap = cap;
		temp.row = cap;
		temp.col = cap;
		int det = 0, t;

		//Riêng ma trận cấp 2 thì bỏ dòng đi ta có ma trận cấp 1 nhưng ở hàm tính det thì điều kiện dừng là det==2 => ta phải làm trường hợp riêng
		if (cap == 2)
		{
			//Đổi chỗ a[0][0] và a[1][1]
			temp.matrix[0][0] = matrix[1][1];
			temp.matrix[1][1] = matrix[0][0];
			temp.matrix[0][1] = -1 * matrix[1][0];
			temp.matrix[1][0] = -1 * matrix[0][1];
		}
		// Ở tại mỗi dòng thì mỗi lần lấy ra một matrix con thì bỏ lần lượt từng dòng với cột 
		//Với d và c là các dòng-cột ta bỏ lần lượt
		else
		{
			for (int d = 0; d < cap; d++)
			{
				for (int c = 0; c < cap; c++)
				{
					double** subMatrix;
					int dong = 0, cot = 0;
					//Khởi tạo địa chỉ cho subMatrix
					CreateNewMatrix(subMatrix, cap);
					for (int i = 0; i < cap; i++)
					{
						//nếu i không trùng với dòng bỏ thì thực hiện
						if (i != d)
						{
							cot = 0;
							for (int j = 0; j < cap; j++)
							{
								//Nếu j không trùng với dòng bỏ thì thực hiện tìm ma trận con
								if (j != c)
								{
									subMatrix[dong][cot] = matrix[i][j];
									cot++;
								}
							}
							dong++;
						}

					}


					//Hệ số -1(i+j)
					int somu = c + d;
					int heso;
					if (somu % 2 == 0)
						heso = 1;
					else
						heso = -1;

					//Trả về ma trận phụ hợp
					temp.matrix[d][c] = heso * Det(subMatrix, cot);

					//cout << endl;

					delete[] subMatrix;
				}
			}
		}
		return temp;
	}

	
	//return det;
}


Matrix Matrix::inverse()
{
	
	if (row != col)
	{
		cout << "Khong phai ma tran vuong\n";
		return NULL;
	}
	else
	{
		//Gọi hàm tìm ma trận phụ hợp
		Matrix adj = FindAdj();
		//Cấp = row vì nó là ma trận vuông
		cap = row;
		//Tranform lại ma trận phụ hợp sau đó nhân cho 1/DET|A| là ra được ma trận nghịch đảo
		adj.matrix = Transform(adj.matrix, adj.cap, adj.cap);
		for (int i = 0; i < cap; i++)
		{
			for (int j = 0; j < cap; j++)
			{
				//A^-1 = 1/Det|A| * Adj(A)
				adj.matrix[i][j] *= (double)1 / Det(matrix, cap);
			}
		}
		return adj;
	}
	

}

Matrix Matrix::operator*(const Matrix b)
{
	if (col != b.row)
	{
		cout << "Khong the nhan(vi so cot KHAC so dong) \n";
		return NULL;
	}
	else
	{
		Matrix kq;
		//Kết quả trả về là một ma trận với cấp là : dòng của A x Cột của B
		CreateNewMatrix(kq.matrix, row, b.col);
		kq.row = row;
		kq.col = b.col;
		int c = 0;
		for (int i = 0; i < row; i++)
		{
			
			for (int j = 0; j < b.col; j++)
			{
				int sum = 0;
				for (int k = 0; k < col; k++)
				{

					sum += matrix[i][k] * b.matrix[k][j];
				}
				kq.matrix[i][c] = sum;
				c++;
			}
			c = 0;
		}
		return kq;
	}

	
}



//Đếm số dòng khác 0 trong matrix hỗ trợ việc tính rank
int DemSoDongKhac0(double** matrix, int row, int col)
{
	int count = 0;
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (matrix[i][j] != 0)
				break;
			else
			{
				if (j == col - 1)   //đã quét hết cột
				{
					count++;
				}
			}
		}
	}
	return row - count;
}
//Tính số lượng số 0 có trong dòng đó (từ đầu line cho đến khi gặp số !=0)
int CalcZero(double **matrix , int col  , int line)
{
	int sum = 0;
	for (int j = 0; j < col; j++)
	{
		if (matrix[line][j] == 0)
			sum++;
		else
		{
			return sum;
		}
	}
	return sum;
}
//Kiểm tra xem dòng đó có toàn số 0 không
bool isFullZero(double** matrix, int line, int col)
{
	for (int j = 0; j < col; j++)
	{
		if (matrix[line][j] != 0)
			return false;

	}
	return true;
}
//Swapline : hỗ trợ việc đổi dòng matrix nhiều số 0
void SwapLine(double** matrix, int row, int col)
{
	for (int i = 0; i < row-1; i++)
	{
		for (int j = i + 1; j < row; j++)
		{
			if (CalcZero(matrix, col, i) > CalcZero(matrix, col, j))
				//Thực hiện swap line
			{
				for (int k = 0; k < col; k++)
				{
					swap(matrix[i][k], matrix[j][k]);
				}
			}
		}
	}
}
//Tìm vị trí cột đầu tiên !=0 của line 1
int FirstCol(double** matrix, int line ,int col)
{
	for (int i = 0; i < col; i++)
	{
		if (matrix[line][i] != 0)
			return i;
	}
	return 0;
}


/*
Thuật toán tìm hạng của ma trận:

Đầu tiên ta sẽ biến nó về dạng ma trận bậc thang như sau:
a b c d
0 x y z
0 0 j k
0 0 0 p

đó là một dạng của ma trận bậc thang(thật ra ma trận bậc thang có nhiều dàng)
Và hạng của nó = số dòng khác 0 của ma trận ấy.

*/

//Hàm chuyển về ma trận bậc thang :

double**ChuyenVeBacThang(double** matrix, int row, int col)
{
	int cot = FirstCol(matrix, 0, col);  //Tìm số đầu tiên khác 0 dòng đầu tiên
	for (int i = 0; i < row - 1; i++)
	{
		for (int j = i + 1; j < row; j++)  //dòng chạy
		{
			//lấy giá trị dòng trên và dòng dưới
			int a = matrix[i][cot];
			int b = matrix[j][cot];
			for (int k = 0; k < col; k++)
			{
				//Tại mỗi cột thì trừ nhau cho mất đi giá trị đầu tiên(biến về ma trận bậc thang)
				matrix[j][k] = matrix[j][k] * a - matrix[i][k] * b;
			}

		}
		//Sau mỗi lần trừ , tránh trường hợp những dòng = 0 thì thuật toán sẽ bị sai.
		//Vì vậy sau mỗi lần trừ ta phải sort lại ma trận
		SwapLine(matrix, row, col);
		cot = FirstCol(matrix, i + 1, col);

	}
	return matrix;
}

int  Matrix::Rank()
{
	//Tạo ma trận với , mọi thao tác sẽ thực hiện trên biến matrix tạm(tránh thay đổi giá trị)
	double** matrixtemp;
	CreateNewMatrix(matrixtemp,row,col);
	//Gán bằng với matrix hiện tại của class:
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			matrixtemp[i][j] = matrix[i][j];
		}
	}
	
	//Gọi hàm thay đổi thứ tự các dòng
	SwapLine(matrixtemp, row, col);
	
	//Gọi hàm chuyển về ma trận bậc thang
	matrixtemp = ChuyenVeBacThang(matrixtemp, row, col);
	


	int Rank = DemSoDongKhac0(matrixtemp, row, col);
	delete matrixtemp;

	return Rank;

	//Bắt đầu tính hạng của ma trận = số dòng khác 0 của ma trận = số dòng - số dòng(=0);
}

//Hàm chuyển số qua chuỗi
string Tostring(int n)
{
	return std::to_string(n);
}

float SumHeSo(float* a , int n)
{
	float sum = 0;
	for (int i = 0; i < n; i++)
	{
		sum += a[i];
	}
	return sum;
}

//Đây là hàm hộ trợ tìm nghiệm sau khi chuyển về ma trận bậc thang
void TimNghiem(double** matrix, int dong, int cot)
{

	int rank = DemSoDongKhac0(matrix, dong, dong);

	//_______________________________________________________________________________ TRƯỜNG HỢP HỆ CÓ DUY VÔ NGHIỆM_______________________________________________________________________________

	if (rank < dong && matrix[dong - 1][cot - 1] != 0)
	{
		cout << "He vo nghiem" << endl;
		return;
	}
	//_____________________________________________________________________________ TRƯỜNG HỢP HỆ CÓ DUY NHẤT 1 NGHIỆM_______________________________________________________________
	else if (rank == dong)
	{
		//Mảng a dùng để lưu các nghiệm
		float* a = new float[dong];
		a[0] = (float)matrix[dong - 1][cot - 1] / matrix[dong - 1][cot - 2];
		int n = 1;
		for (int i = dong - 2; i >= 0; i--)
		{
			//Pos a là tại mỗi vị trí cần trừ để tìm x thì trừ đi những nghiệm đã có	
			int posA = 0;
			for (int j = cot - 2; j >= 0; j--)
			{
				//Nếu tại cột j không phải là một phần tử cơ sở(phần tử đầu tiên tại dòng !=0) , thì áp dụng quy tắc tìm x tính bình thường
				if (j != FirstCol(matrix, i, cot))
				{

					matrix[i][cot - 1] -= a[posA] * matrix[i][j];
					posA++;
				}
				//Sau khi đã đến vị trí cơ sở thì => nghiệm tại đó 
				else
				{
					matrix[i][cot - 1] = (float)matrix[i][cot - 1] / matrix[i][j];
					a[n++] = matrix[i][cot - 1];
				}
			}
		}
		for (int i = 0; i < n; i++)
			cout << a[i] << "\t";
		delete[] a;
	}

	//__________________________________________________________________________________TRƯỜNG HỢP HỆ CÓ NGHIỆM TỰ DO__________________________________________________________________
	else if (rank < dong && matrix[dong - 1][cot - 1] == 0)
	{
		//Chuỗi nghiệm mục đích là để xuất ra những nghiệm mà ta tìm được
		string* ChuoiNghiem = new string[dong + 1];
		ChuoiNghiem[0] = "u1";
		int soNghiemTuDo = 1;  //Đánh dấu nghiệm để xuất ra
		int nghiemThuN = 1;

		int slNghiem = dong - rank;
		cout << slNghiem << endl;
		for (int i = soNghiemTuDo; i < slNghiem; i++)
		{
			ChuoiNghiem[i] = "u" + to_string(i + 1);
			nghiemThuN++;

		}
		//Dùng để đánh dấu các hệ số t
		float* hesoT = new float[dong + 1];
		float* hesoTam = new float[dong + 1];
		for (int i = 0; i < rank - dong; i++)
		{
			hesoTam[i] = 0;
		}
		int soluongHs = 0;
		int cotBien = cot - 2; //Thứ tự lấy nghiệm của các cột
		//Mảng a dùng để lưu các nghiệm
		float* a = new float[dong];
		//Gán các nghiệm tự do = 0 hỗ trợ ta trong việc tách phần số và phần biến riêng
		a[0] = 0;
		int n = 1;

		int c;
		//Tìm dòng khác 0 đầu tiên
		for (int i = dong - 2; i >= 0; i--)
		{
			//Nếu dòng đó toàn số 0 thì tăng biến tự do lên 1.
			if (isFullZero(matrix, i, cot - 2) == true)
			{
				a[soNghiemTuDo++] = 0;
				n++;
			}
			else if (isFullZero(matrix, i, cot - 2) == false)
			{
				dong = i;
				break;
			}

		}

		//Tại các dòng khác 0 thì ta bắt đầu gán biến cho từng hệ số
		for (int i = dong; i >= 0; i--)
		{
			soluongHs = 0;

			for (c = cot - 2; c >= 0; c--)
			{
				if (soluongHs == slNghiem)
					break;
				float heso = matrix[i][c];
				hesoT[soluongHs] = heso;
				hesoT[soluongHs] *= -1;
				soluongHs++;

			}
			//Dành cho trường hợp 1 nghiệm tự do:
			//Hệ số tại mỗi vị trí dòng sau khi đã lấy biến các dòng dưới.
			//số t sau = he số cột hiện tại x số biến t lúc trước
			//Pos a là tại mỗi vị trí cần trừ để tìm x thì trừ đi những nghiệm đã có	
			int posA = 0;

			//tongHS += matrix[i][cot - 2];
			for (int j = cot - 2; j >= 0; j--)
			{
				//Nếu tại cột j không phải là một phần tử cơ sở(phần tử đầu tiên tại dòng !=0) , thì áp dụng quy tắc tìm x tính bình thường
				if (j != FirstCol(matrix, i, cot))
				{
					cout << "J= "  << j << endl;
					matrix[i][cot - 1] -= a[posA] * matrix[i][j];
					cout << "Matrix ne :" << a[posA] << "*" << matrix[i][j] << "=" << matrix[i][cot - 1] << endl;
					cout << "Pos A  = " << posA << "\t" << a[posA] << endl;
					posA++;
				}
				//Trường hợp line đó toàn 0
				//Sau khi đã đến vị trí cơ sở thì => nghiệm tại đó 
				else if (j == FirstCol(matrix, i, cot))
				{


					if (matrix[i][cot - 1] != 0)
					{
						matrix[i][cot - 1] = (float)matrix[i][cot - 1] / matrix[i][j];
					}
					a[n++] = matrix[i][cot - 1];

					for (int z = 0; z < soluongHs; z++)
					{
						hesoT[z] /= (float)matrix[i][j];
					}
					//Chỉ có một nghiệm
					if (soNghiemTuDo == 1)
					{
						hesoT[soluongHs] = matrix[i][j + 1] * hesoT[soluongHs - 1];
						hesoT[soluongHs] *= -1;
						soluongHs++;
						ChuoiNghiem[nghiemThuN++] = to_string(matrix[i][cot - 1]) + "+" + to_string(hesoT[soluongHs - 1]) + "u" + to_string(soNghiemTuDo);

					}
					else
					{
						cout << "Matrix = " << matrix[i][cot - 1] << endl;


						int count = soluongHs;
						ChuoiNghiem[nghiemThuN] = to_string(matrix[i][cot - 1]);
						//Cộng hệ số lại
						if (i != dong)
						{
							for (int z = 0; z < soluongHs; z++)
							{
								hesoTam[z] *= matrix[i][j + 1];
								cout << hesoTam[z] << "\t";
							}
						}

						cout << endl;
						for (int z = 0; z < count; z++)
						{
							if(i==dong)
							ChuoiNghiem[nghiemThuN] += "+" + to_string(hesoT[z]) + "u" + to_string((z + 1));
							else
							{
								float hstemp = hesoT[z] + -hesoTam[z];
								cout << hstemp << "\t" << endl;
								ChuoiNghiem[nghiemThuN] += "+" + to_string(hstemp) + "u" + to_string((z + 1));
							}

						}
						nghiemThuN++;
					}
					break;

				}

			}
			for (int z = 0; z < soluongHs; z++)
			{
				hesoTam[z] = hesoT[z];
			}
		}
		for (int i = 0; i < nghiemThuN; i++)
			cout << ChuoiNghiem[i] << "\t\t";
		delete[] a;
	}
}

void Matrix::InRaNghiem()
{
	//Chuyển về ma trận bậc thang
	double** matrixtemp;
	int sobien, pt;
	cout << "Nhap vao so bien cua he phuong trinh : ";
	cin >> sobien;
	cout << "Nhap vao so phuong trinh : ";
	cin >> pt;
	
	int cloneDong0 = 0;
	if (pt < sobien)
		cloneDong0 = sobien - pt;
		
	//Ta sẽ tạo với số biến + 1 tại vì thêm vào giá trị của mỗi phương trình nữa
	CreateNewMatrix(matrixtemp , pt+ cloneDong0, sobien+1);
	cout << "Nhap tuan tu cac he phuong trinh : " << endl;
	//Gán bằng với matrix hiện tại của class:
	for (int i = 0; i < pt; i++)
	{
		for (int j = 0; j < sobien+1; j++)
		{
			cin >> matrixtemp[i][j];
		}
	}

	for (int i = pt; i < pt+cloneDong0; i++)
	{
		for (int j = 0; j < sobien + 1; j++)
		{
			matrixtemp[i][j] = 0;
		}
	}
	//Gọi hàm thay đổi thứ tự các dòng
	SwapLine(matrixtemp, row, col);
	for (int i = 0; i < pt + cloneDong0; i++)
	{
		for (int j = 0; j < sobien + 1; j++)
		{
			cout << matrixtemp[i][j] << "\t";
		}
		cout << endl;
	}

	//Gọi hàm chuyển về ma trận bậc thang
	matrixtemp = ChuyenVeBacThang(matrixtemp, pt+cloneDong0, sobien+1);


	

	//Tìm nghiệm:
	TimNghiem(matrixtemp, pt+cloneDong0 , sobien+1);

	
	
}

Matrix::~Matrix()
{
}

